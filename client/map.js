// Generated by CoffeeScript 1.4.0
(function() {
  var Heron, map_throw, _ref,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Heron = (_ref = this.Heron) != null ? _ref : this.Heron = {};

  if ((typeof module !== "undefined" && module !== null) && module.exports) {
    Heron.Util = require('util.js').Heron.Util;
  }

  map_throw = function() {
    throw "Do not use Heron.Map directly.";
  };

  Heron.Map = (function() {

    function Map() {}

    Map.prototype.get = function() {
      var keys;
      keys = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return map_throw;
    };

    Map.prototype.gets = function(key) {
      return map_throw;
    };

    Map.prototype.geta = function() {
      var key;
      key = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return map_throw;
    };

    Map.prototype.keys = function() {
      return map_throw;
    };

    Map.prototype.set = function() {
      var key_values;
      key_values = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return map_throw;
    };

    Map.map = function(obj) {
      var ok, v, _i, _len, _ref1;
      ok = function(x) {
        return (obj[x] != null) && typeof obj[x] === 'function';
      };
      _ref1 = ['get', 'gets', 'geta', 'keys'];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        v = _ref1[_i];
        if (!ok(v)) {
          return new this.ObjectMap(obj);
        }
      }
      return obj;
    };

    return Map;

  })();

  Heron.Map.Mixin = {
    gets: function(key) {
      return this.get(key)[key];
    },
    geta: function() {
      var k, key, values, _i, _len, _results;
      key = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      values = this.get.apply(this, key);
      _results = [];
      for (_i = 0, _len = key.length; _i < _len; _i++) {
        k = key[_i];
        _results.push(values[k]);
      }
      return _results;
    },
    keys: function() {
      var k, _results;
      _results = [];
      for (k in this.get()) {
        _results.push(k);
      }
      return _results;
    }
  };

  Heron.Map.ObjectMap = (function() {

    Heron.Util.include(ObjectMap, Heron.Map.Mixin);

    function ObjectMap(obj) {
      var _ref1;
      if (obj == null) {
        obj = {};
      }
      if ((_ref1 = this._) == null) {
        this._ = {};
      }
      this._.obj = obj;
    }

    ObjectMap.prototype.get = function() {
      var keys;
      keys = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this._.obj;
    };

    ObjectMap.prototype.set = function(key_values) {
      var k, v;
      for (k in key_values) {
        v = key_values[k];
        this._.obj[k] = v;
      }
      return this;
    };

    return ObjectMap;

  })();

  Heron.Map.ParametricMap = (function(_super) {

    __extends(ParametricMap, _super);

    function ParametricMap() {
      return ParametricMap.__super__.constructor.apply(this, arguments);
    }

    ParametricMap.prototype.keys = function() {
      return Heron.Util.Keys(this._.obj);
    };

    ParametricMap.prototype.get = function() {
      var k, key, result, v, values;
      key = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      values = ParametricMap.__super__.get.apply(this, key);
      result = {};
      for (k in values) {
        v = values[k];
        while (typeof v === 'function') {
          v = v();
        }
        result[k] = v;
      }
      return result;
    };

    return ParametricMap;

  })(Heron.Map.ObjectMap);

}).call(this);
