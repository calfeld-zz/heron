// Generated by CoffeeScript 1.4.0
(function() {
  var Heron, c_max_reconnect_retry, receive, reconnect, _ref;

  Heron = (_ref = this.Heron) != null ? _ref : this.Heron = {};

  c_max_reconnect_retry = 1;

  reconnect = function() {
    receive.call(this);
    jQuery.get(this._.path + "/flush", {
      client_id: this._.client_id
    });
    return null;
  };

  receive = function() {
    var failure,
      _this = this;
    if (!this._.connected) {
      return null;
    }
    failure = function() {
      if (!_this._.connected) {
        return;
      }
      if (_this._.reconnect_retry < c_max_reconnect_retry) {
        _this._.verbose("disconnected; trying to reconnect.");
        ++_this._.reconnect_retry;
        return setTimeout(function() {
          return reconnect.call(_this);
        }, 0);
      } else {
        _this._.verbose("disconnected; retry count exceeded.");
        _this._.connected = false;
        _this._.current_receive = null;
        return jQuery(document).trigger("Heron.Comet:lost", _this);
      }
    };
    this._.current_receive = jQuery.get(this._.path + "/receive", {
      client_id: this._.client_id
    }, function(data, textStatus, transport) {
      if (!_this._.connected) {
        return;
      }
      if (transport.status !== 200) {
        return failure();
      } else if (_this._.connected) {
        if (_this._.reconnect_retry > 0) {
          _this._.verbose("reconnected.");
          _this._.reconnect_retry = 0;
        }
        if (transport.responseText !== "") {
          _this._.verbose(transport.responseText);
          _this._.on_message(transport.responseText, _this);
        }
        return setTimeout(function() {
          return receive.call(_this);
        }, 0);
      }
    }).fail(failure);
    return null;
  };

  Heron.Comet = (function() {

    function Comet(config) {
      var _ref1, _ref2, _ref3, _ref4, _ref5,
        _this = this;
      this._ = {
        path: (_ref1 = config.path) != null ? _ref1 : "/comet",
        on_message: (_ref2 = config.on_message) != null ? _ref2 : function() {},
        on_verbose: (_ref3 = config.on_verbose) != null ? _ref3 : function() {},
        on_exception: (_ref4 = config.on_exception) != null ? _ref4 : function(e, text, comet) {
          return _this._.verbose("Exception: " + text);
        },
        client_id: (_ref5 = config.client_id) != null ? _ref5 : Heron.Util.generate_id(),
        connected: false,
        verbose: function(s) {
          return _this._.on_verbose("comet: " + s, _this);
        },
        reconnect_retry: 0
      };
      this._.verbose("initialized");
    }

    Comet.prototype.client_id = function() {
      return this._.client_id;
    };

    Comet.prototype.connected = function() {
      return this._.connected;
    };

    Comet.prototype.connect = function() {
      var _this = this;
      jQuery.get(this._.path + "/connect", {
        client_id: this._.client_id
      }, function() {
        _this._.connected = true;
        receive.call(_this);
        _this._.verbose("connected");
        return jQuery(document).trigger("Heron.Comet:connected", _this);
      });
      return this;
    };

    Comet.prototype.disconnect = function() {
      var _ref1,
        _this = this;
      if (this._.connected) {
        this._.connected = false;
        if ((_ref1 = this._.current_receive) != null) {
          _ref1.abort();
        }
        jQuery.get(this._.path + "/disconnect", {
          client_id: this._.client_id
        }, function() {
          _this._.verbose("disconnected");
          return jQuery(document).trigger("Heron.Comet:disconnected", _this);
        });
      }
      return this;
    };

    return Comet;

  })();

}).call(this);
