// Generated by CoffeeScript 1.4.0
(function() {
  var Heron, Receiver, make_thingy, only_keys, send_create, send_update_subkey, split_key, subkey_key, _ref,
    __slice = [].slice;

  Heron = (_ref = this.Heron) != null ? _ref : this.Heron = {};

  only_keys = function(obj, keys) {
    var k, result, _i, _len;
    result = {};
    for (_i = 0, _len = keys.length; _i < _len; _i++) {
      k = keys[_i];
      if (!(obj[k] != null)) {
        throw "Missing key " + k;
      }
      result[k] = obj[k];
    }
    return result;
  };

  subkey_key = function(id, subkey) {
    return "" + id + "." + subkey;
  };

  split_key = function(key) {
    var id, rest, _ref1;
    _ref1 = key.split("."), id = _ref1[0], rest = 2 <= _ref1.length ? __slice.call(_ref1, 1) : [];
    return [id, rest.join(".")];
  };

  send_update_subkey = function(thingy, subkey) {
    var attr_names, data, domain, key, type_data;
    type_data = this._.per_type[thingy.typename()];
    attr_names = type_data.subkeys[subkey];
    data = only_keys(thingy.get.apply(thingy, attr_names), attr_names);
    key = subkey_key(thingy.id(), subkey);
    domain = this._.domain;
    if (subkey === '_') {
      data = {
        typename: thingy.typename(),
        subkeys: Heron.Util.keys(per_type.subkeys),
        attrs: data
      };
    }
    this._.dictionary.update(this._.domain, key, data);
    return null;
  };

  send_create = function(thingy) {
    var id, type_data, typename,
      _this = this;
    typename = thingy.typename();
    id = thingy.id();
    type_data = this._.per_type[typename];
    this._.dictionary.batch(function() {
      var attr_keys, key, subkey, value, _ref1;
      _ref1 = type_data.subkeys;
      for (subkey in _ref1) {
        attr_keys = _ref1[subkey];
        key = subkey_key(id, subkey);
        value = only_keys(thingy.get.apply(thingy, attr_keys), attr_keys);
        if (subkey === '_') {
          value = {
            typename: typename,
            attrs: value
          };
        }
        _this._.dictionary.create(_this._.domain, key, value);
      }
      return _this._.dictionary.create(_this._.domain, '%create', id);
    });
    return null;
  };

  make_thingy = function(typename, id, attrs, local_data) {
    var thingy;
    this._.make_guard = true;
    thingy = new Heron.Thingy(this, typename, id, attrs, local_data);
    this._.make_guard = false;
    return thingy;
  };

  Receiver = (function() {

    function Receiver(thingyverse) {
      this._ = thingyverse._;
    }

    Receiver.prototype.create = function(domain, key, value) {
      var attrs, id, info, k, make, partial_attrs, subkey, v, _base, _base1, _ref1, _ref2, _ref3, _ref4,
        _this = this;
      if (domain !== this._.domain) {
        this._.on_error("Received message for unknown domain: " + domain + ".");
      }
      make = function(id, info) {
        if (!(info.typename != null)) {
          return _this._.on_error("Missing typename for thingy: " + id);
        } else {
          return _this._.make_thingy(info.typename, id, info.attrs, false);
        }
      };
      if (key === '_synced') {
        _ref1 = this._.partials;
        for (id in _ref1) {
          info = _ref1[id];
          make(id, info);
        }
        this._.partials = {};
      } else if (key === '%create') {
        id = value;
        info = this._.partials[id];
        if (!(info != null)) {
          this._.on_error("Missing everything for thingy: " + id);
        } else {
          make(id, info);
        }
        delete this._.partials[id];
      } else if (key[0] !== '_') {
        _ref2 = split_key(key), id = _ref2[0], subkey = _ref2[1];
        attrs = value;
        if ((_ref3 = (_base = this._.partials)[id]) == null) {
          _base[id] = {};
        }
        if (subkey === '_') {
          if (!(value.typename != null)) {
            this._.on_error("Cannot understand basekey " + key + ".  No typename.");
          }
          if (!(value.attrs != null)) {
            this._.on_error("Cannot understand basekey " + key + ".  No attrs.");
          }
          if (!(this._.per_type[value.typename] != null)) {
            this._.on_error("Received basekey " + key + " for unknown typename: " + value.typename + ".");
          }
          this._.partials[id].typename = value.typename;
          attrs = value.attrs;
        }
        partial_attrs = (_ref4 = (_base1 = this._.partials[id]).attrs) != null ? _ref4 : _base1.attrs = {};
        for (k in attrs) {
          v = attrs[k];
          partial_attrs[k] = v;
        }
      }
      return null;
    };

    Receiver.prototype.update = function(domain, key, value) {
      var id, subkey, thingy_data, type_data, _ref1;
      _ref1 = split_key(key), id = _ref1[0], subkey = _ref1[1];
      thingy_data = this._.per_thingy[id];
      if (domain !== this._.domain) {
        this._.on_error("Received message for unknown domain: " + domain + ".");
        return null;
      }
      if (!(thingy_data != null)) {
        return null;
      }
      type_data = this._.per_type[thingy_data.thingy.typename()];
      if (!(type_data.subkeys[subkey] != null)) {
        this._.on_error("Received update for non-existent subkey " + subkey + ": " + key);
        return null;
      }
      if (subkey === '_') {
        value = value.attrs;
      }
      thingy_data.delegate.set(thingy_data.thingy, value, false);
      return null;
    };

    Receiver.prototype["delete"] = function(domain, key) {
      var id, subkey, thingy_data, _ref1;
      _ref1 = split_key(key), id = _ref1[0], subkey = _ref1[1];
      thingy_data = this._.per_thingy[id];
      if (domain !== this._.domain) {
        this._.on_error("Received message for unknown domain: " + domain + ".");
        return null;
      }
      if (!(thingy_data != null)) {
        return null;
      }
      thingy_data.delegate.remove(thingy_data.thingy, false);
      delete this._.per_thingy[id];
      return null;
    };

    return Receiver;

  })();

  Heron.Thingy = (function() {

    function Thingy(thingyverse, typename, id, attrs, local_data) {
      var _this = this;
      if (!thingyverse._.make_guard) {
        throw 'Heron.Thingy: Do not create Heron.Thingy directly.  Use Heron.Thingyverse#create';
      }
      if (!(thingyverse._.per_type[typename] != null)) {
        throw "Heron.Thingy: Unknown typename " + typename;
      }
      if (thingyverse._.per_thingy[id] != null) {
        throw "Heron.Thingy: Thingy " + id + " already exists.";
      }
      this._ = {
        thingyverse: thingyverse,
        typename: typename,
        id: id,
        type_data: thingyverse._.per_type[typename],
        removed: false,
        assert_not_removed: function() {
          if (_this._.removed) {
            throw "Heron.Thingy: Trying to do something with removed thingy " + (_this.id());
          }
        }
      };
      this._.delegate = this._.type_data.initializer.call(this, attrs, local_data);
      thingyverse._.per_thingy[id] = {
        thingy: this,
        delegate: this._.delegate
      };
    }

    Thingy.prototype.id = function() {
      return this._.id;
    };

    Thingy.prototype.typename = function() {
      return this._.typename;
    };

    Thingy.prototype.thingyverse = function() {
      return this._.thingyverse;
    };

    Thingy.prototype.set = function(attrs, local_data) {
      var attr, subkeys,
        _this = this;
      if (local_data == null) {
        local_data = true;
      }
      this._.assert_not_removed();
      subkeys = {};
      for (attr in attrs) {
        subkeys[this._.type_data.attrs[attr]] = true;
      }
      this._.delegate.set(this, attrs, local_data);
      this._.thingyverse.batch(function() {
        var subkey, _results;
        _results = [];
        for (subkey in subkeys) {
          _results.push(_this._.thingyverse._.send_update_subkey(_this, subkey));
        }
        return _results;
      });
      return this;
    };

    Thingy.prototype.get = function() {
      var attr_keys, _ref1;
      attr_keys = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      this._.assert_not_removed();
      return (_ref1 = this._.delegate).get.apply(_ref1, [this].concat(__slice.call(attr_keys)));
    };

    Thingy.prototype.gets = function(attr_key) {
      return this.get(attr_key)[attr_key];
    };

    Thingy.prototype.geta = function() {
      var attr_keys, k, values, _i, _len, _results;
      attr_keys = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      values = this.get.apply(this, attr_keys);
      _results = [];
      for (_i = 0, _len = attr_keys.length; _i < _len; _i++) {
        k = attr_keys[_i];
        _results.push(values[k]);
      }
      return _results;
    };

    Thingy.prototype.remove = function(local_data) {
      var prefix,
        _this = this;
      if (local_data == null) {
        local_data = true;
      }
      this._.assert_not_removed();
      this._.delegate.remove(this, local_data);
      prefix = id;
      this._.thingyverse.batch(function() {
        var key, subkey, _results;
        _results = [];
        for (subkey in type_data.subkeys) {
          key = subkey_key(id, subkey);
          _results.push(_this._.thingyverse._.dictionary["delete"](domain, key));
        }
        return _results;
      });
      this._.removed = true;
      delete this._.thingyverse._.per_thingy[id];
      return null;
    };

    return Thingy;

  })();

  Heron.ThingyDelegate = (function() {

    function ThingyDelegate() {}

    return ThingyDelegate;

  })();

  Heron.Thingyverse = (function() {

    function Thingyverse(config) {
      var _ref1,
        _this = this;
      if (config == null) {
        config = {};
      }
      this._ = {
        dictionary: null,
        domain: null,
        on_error: (_ref1 = config.on_error) != null ? _ref1 : function(s) {
          throw s;
        },
        per_thingy: {},
        per_type: {},
        partials: {},
        send_update_subkey: function(thingy, subkey) {
          return send_update_subkey.call(_this, thingy, subkey);
        },
        send_create: function(thingy) {
          return send_create.call(_this, thingy);
        },
        make_thingy: function(typename, id, domain, attrs, local_data) {
          return make_thingy.call(_this, typename, id, domain, attrs, local_data);
        }
      };
    }

    Thingyverse.prototype.dictionary = function() {
      return this._.dictionary;
    };

    Thingyverse.prototype.domain = function() {
      return this._.domain;
    };

    Thingyverse.prototype.connect = function(dictionary, domain) {
      var receiver;
      this._.dictionary = dictionary;
      this._.domain = domain;
      receiver = new Receiver(this);
      return dictionary.subscribe(this._.domain, receiver);
    };

    Thingyverse.prototype.define = function(typename, baseattrs, subkeys, initializer) {
      var attr, attrs, subkey, type_data, _i, _j, _len, _len1;
      if (this._.per_type[typename] != null) {
        throw "Heron.Thingy: " + typename + " already defined.";
      } else {
        type_data = {
          typename: typename,
          initializer: initializer,
          attrs: {},
          subkeys: {}
        };
        type_data.subkeys['_'] = baseattrs;
        for (_i = 0, _len = baseattrs.length; _i < _len; _i++) {
          attr = baseattrs[_i];
          type_data.attrs[attr] = '_';
        }
        for (subkey in subkeys) {
          attrs = subkeys[subkey];
          type_data.subkeys[subkey] = attrs;
          for (_j = 0, _len1 = attrs.length; _j < _len1; _j++) {
            attr = attrs[_j];
            if (type_data.attrs[attr] != null) {
              throw "Heron.Thingy: Duplicatee attr for " + typename + ": " + attr;
            }
            type_data.attrs[attr] = subkey;
          }
        }
        this._.per_type[typename] = type_data;
        return this;
      }
    };

    Thingyverse.prototype.create = function(typename, attrs, local_data) {
      var id, thingy;
      if (attrs == null) {
        attrs = {};
      }
      if (local_data == null) {
        local_data = true;
      }
      if (!this._.dictionary) {
        throw "Call #connect first.";
      }
      id = Heron.Util.generate_id();
      while (this._.per_thingy[id] != null) {
        id = Heron.Util.generate_id();
      }
      thingy = this._.make_thingy(typename, id, attrs, local_data);
      if (thingy != null) {
        this._.send_create(thingy);
      }
      return thingy;
    };

    Thingyverse.prototype.batch = function(f) {
      return this._.dictionary.batch(f);
    };

    Thingyverse.prototype.begin = function() {
      return this._.dictionary.begin();
    };

    Thingyverse.prototype.finish = function() {
      return this._.dictionary.end();
    };

    Thingyverse.prototype.each_thingy = function(f) {
      var data, id, _ref1, _results;
      _ref1 = this._.per_thingy;
      _results = [];
      for (id in _ref1) {
        data = _ref1[id];
        _results.push(f(data.thingy));
      }
      return _results;
    };

    Thingyverse.prototype.thingy_by_id = function(id) {
      var _ref1;
      return (_ref1 = this._.per_thingy[id]) != null ? _ref1.thingy : void 0;
    };

    return Thingyverse;

  })();

}).call(this);
