// Generated by CoffeeScript 1.6.3
(function() {
  var Heron, c_vector_type;

  c_vector_type = Float32Array;

  Heron = this.Heron != null ? this.Heron : this.Heron = {};

  Heron.Vector = (function() {
    function Vector() {}

    Vector.vec2 = function(x, y) {
      var v;
      if (x == null) {
        x = 0;
      }
      if (y == null) {
        y = 0;
      }
      v = new c_vector_type(2);
      v[0] = x;
      v[1] = y;
      return v;
    };

    Vector.dup2 = function(v) {
      return Heron.Vector.vec2(v[0], v[1]);
    };

    Vector.equal2 = function(v, b) {
      return v[0] === b[0] && v[1] === b[1];
    };

    Vector.set2 = function(a, x, y) {
      a[0] = x;
      a[1] = y;
      return a;
    };

    Vector.add2 = function(a, b) {
      a[0] += b[0];
      a[1] += b[1];
      return a;
    };

    Vector.sub2 = function(a, b) {
      a[0] -= b[0];
      a[1] -= b[1];
      return a;
    };

    Vector.dot2 = function(a, b) {
      return a[0] * b[0] + a[1] * b[1];
    };

    Vector.negate2 = function(a) {
      a[0] *= -1;
      a[1] *= -1;
      return a;
    };

    Vector.length2 = function(v) {
      return Math.sqrt(Heron.Vector.dot2(v, v));
    };

    Vector.scale2 = function(a, s) {
      a[0] *= s;
      a[1] *= s;
      return a;
    };

    Vector.normalize2 = function(a) {
      return Heron.Vector.scale2(a, 1 / Heron.Vector.length2(a));
    };

    Vector.multiply2 = function(a, m) {
      var t;
      t = m[0][0] * a[0] + m[1][0] * a[1];
      a[1] = m[0][1] * a[0] + m[1][1] * a[1];
      a[0] = t;
      return a;
    };

    Vector.rotate2 = function(a, phi) {
      var c, s;
      c = Math.cos(phi);
      s = Math.sin(phi);
      Heron.Vector.multiply2(a, [[c, -s], [s, c]]);
      return a;
    };

    Vector.to_s2 = function(v) {
      return "(" + v[0] + ", " + v[1] + ")";
    };

    Vector.normal2 = function(a) {
      var t;
      t = a[0];
      a[0] = a[1];
      a[1] = -t;
      return a;
    };

    Vector.normalb2 = function(a) {
      var t;
      t = a[0];
      a[0] = -a[1];
      a[1] = t;
      return a;
    };

    Vector.angle2 = function(a, b) {
      var subphi;
      if (a[0] === 0) {
        if (a[1] < 0) {
          return 3 * Math.PI / 2;
        } else {
          return Math.PI / 2;
        }
      } else {
        subphi = Math.atan(a[1] / a[0]);
        if (a[0] < 0) {
          return Math.PI + subphi;
        } else {
          return (subphi + 2 * Math.PI) % (2 * Math.PI);
        }
      }
    };

    return Vector;

  })();

}).call(this);
