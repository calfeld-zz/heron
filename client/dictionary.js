// Generated by CoffeeScript 1.4.0
(function() {
  var Heron, command, dictionary_connect, send_messages, send_to_dictionary, _ref,
    __slice = [].slice;

  Heron = (_ref = this.Heron) != null ? _ref : this.Heron = {};

  command = function(cmd, domain, key, value) {
    var message;
    this._.pdebug("OUT", cmd, domain, key, value);
    message = {
      command: cmd,
      domain: domain,
      key: key
    };
    if (value) {
      message.value = JSON.stringify(value);
    }
    if (this._.batch === 0) {
      send_messages.call(this, [message]);
    } else {
      this._.messages.push(message);
    }
    return null;
  };

  send_to_dictionary = function(command, parameters) {
    parameters.client_id = this._.client_id;
    jQuery.post("" + this._.path + "/" + command, parameters);
    return null;
  };

  send_messages = function(messages) {
    send_to_dictionary.call(this, "messages", {
      messages: JSON.stringify(messages)
    });
    return null;
  };

  dictionary_connect = function() {
    send_to_dictionary.call(this, 'connect', {
      session_id: this._.session_id
    });
    jQuery(document).trigger("Heron.Dictionary:connected");
    return null;
  };

  Heron.Dictionary = (function() {

    function Dictionary(config) {
      var _ref1, _ref2, _ref3, _ref4, _ref5,
        _this = this;
      if (config == null) {
        config = {};
      }
      this._ = {
        receiver: (function() {
          if ((_ref1 = config.receiver) != null) {
            return _ref1;
          } else {
            throw "Missing receiver.";
          }
        })(),
        session_id: (function() {
          if ((_ref2 = config.session_id) != null) {
            return _ref2;
          } else {
            throw "Missing session id.";
          }
        })(),
        client_id: (function() {
          if ((_ref3 = config.client_id) != null) {
            return _ref3;
          } else {
            throw "Missing client id.";
          }
        })(),
        debug: (_ref4 = config.debug) != null ? _ref4 : false,
        path: (_ref5 = config.path) != null ? _ref5 : "/dictionary",
        batch: 0,
        messages: []
      };
      this._.pdebug = function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      };
      if (this._.debug) {
        this._.pdebug = function() {
          var args;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return console.debug.apply(console, ["Heron.Dictionary"].concat(__slice.call(args)));
        };
      }
      jQuery(document).on("Heron.Comet:connected", function() {
        return dictionary_connect.call(_this);
      });
      this._.pdebug("initialized");
    }

    Dictionary.prototype.receive = function(json) {
      var message, messages, _base, _base1, _base2, _base3, _base4, _i, _len;
      messages = jQuery.parseJSON(json);
      this._.pdebug("IN begin");
      if (typeof (_base = this._.receiver).begin === "function") {
        _base.begin();
      }
      for (_i = 0, _len = messages.length; _i < _len; _i++) {
        message = messages[_i];
        switch (message.command) {
          case "create":
            this._.pdebug("IN create", message.domain, message.key, message.value);
            if (typeof (_base1 = this._.receiver).create === "function") {
              _base1.create(message.domain, message.key, jQuery.parseJSON(message.value));
            }
            break;
          case "update":
            this._.pdebug("IN update", message.domain, message.key, message.value);
            if (typeof (_base2 = this._.receiver).update === "function") {
              _base2.update(message.domain, message.key, jQuery.parseJSON(message.value));
            }
            break;
          case "delete":
            this._.pdebug("IN delete", message.domain, message.key, message.value);
            if (typeof (_base3 = this._.receiver)["delete"] === "function") {
              _base3["delete"](message.domain, message.key);
            }
            break;
          default:
            error("Unknown command: " + message.command);
        }
      }
      if (typeof (_base4 = this._.receiver).finish === "function") {
        _base4.finish();
      }
      this._.pdebug("IN finish");
      return this;
    };

    Dictionary.prototype.batch = function(f) {
      this.begin();
      f();
      this.finish();
      return this;
    };

    Dictionary.prototype.begin = function() {
      this._.pdebug("OUT begin batch");
      this._.batch += 1;
      return this;
    };

    Dictionary.prototype.finish = function() {
      this._.pdebug("OUT finish batch");
      if (this._.batch === 0) {
        error("Finishing at batch level 0.");
      } else {
        this._.batch -= 1;
        if (this._.batch === 0) {
          this._.pdebug("OUT execute batch");
          send_messages.call(this, this._.messages);
          this._.messages = [];
        }
      }
      return this;
    };

    Dictionary.prototype.update = function(domain, key, value) {
      command.call(this, "update", domain, key, value);
      return this;
    };

    Dictionary.prototype.create = function(domain, key, value) {
      command.call(this, "create", domain, key, value);
      return this;
    };

    Dictionary.prototype["delete"] = function(domain, key) {
      command.call(this, "delete", domain, key);
      return this;
    };

    return Dictionary;

  })();

}).call(this);
