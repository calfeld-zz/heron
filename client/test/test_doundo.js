// Generated by CoffeeScript 1.4.0
(function() {
  var DU, assert;

  assert = require("chai").assert;

  DU = require("doundo.js").Heron.DoUndo;

  describe('Heron.DoUndo', function() {
    it('should start empty', function() {
      var du;
      du = new DU();
      assert.equal(0, du.actions().length);
      return assert.equal(-1, du.location());
    });
    describe('did', function() {
      var du, x;
      du = new DU();
      x = 0;
      du.did({
        "do": function() {
          return x = 1;
        },
        undo: function() {
          return x = -1;
        },
        message: 'did message'
      });
      it('should not do the action', function() {
        return assert.equal(0, x);
      });
      return it('should add to the queue', function() {
        assert.equal(1, du.actions().length);
        assert.equal('did message', du.action_messages()[0]);
        return assert.equal(0, du.location());
      });
    });
    describe('do', function() {
      var du, x;
      du = new DU();
      x = 0;
      du["do"]({
        "do": function() {
          return x = 1;
        },
        undo: function() {
          return x = -1;
        },
        message: 'do message'
      });
      it('should do the action', function() {
        return assert.equal(1, x);
      });
      return it('should add to the queue', function() {
        return assert.equal(1, du.actions().length);
      });
    });
    describe('undo', function() {
      var du, x;
      du = new DU();
      x = 0;
      du["do"]({
        "do": function() {
          return x = 1;
        },
        undo: function() {
          return x = -1;
        },
        message: 'undo message'
      });
      du.undo();
      it('should undo the action', function() {
        return assert.equal(-1, x);
      });
      it('should move the queue earlier', function() {
        return assert.equal(-1, du.location());
      });
      return it('should not clear the queue', function() {
        return assert.equal(1, du.actions().length);
      });
    });
    describe('redo', function() {
      var du, x;
      du = new DU();
      x = 0;
      du["do"]({
        "do": function() {
          return x = 1;
        },
        undo: function() {
          return x = -1;
        },
        message: 'redo message'
      });
      du.undo();
      du.redo();
      it('should redo the action', function() {
        return assert.equal(1, x);
      });
      it('should move the queue later', function() {
        return assert.equal(0, du.location());
      });
      return it('should not clear the queue', function() {
        return assert.equal(1, du.actions().length);
      });
    });
    describe('do_after_undo', function() {
      var du, x;
      du = new DU();
      x = 0;
      du["do"]({
        "do": function() {
          return x = 1;
        },
        undo: function() {
          return x = -1;
        },
        message: 'dau message'
      });
      du.undo();
      du["do"]({
        "do": function() {
          return x = 2;
        },
        undo: function() {
          return x = -2;
        },
        message: 'dau message 2'
      });
      it('should lose the original', function() {
        assert.equal(1, du.actions().length);
        return assert.equal('dau message 2', du.action_messages()[0]);
      });
      return it('should be done', function() {
        return assert.equal(2, x);
      });
    });
    return describe('reset', function() {
      var du, x;
      du = new DU();
      x = 0;
      du["do"]({
        "do": function() {
          return x = 1;
        },
        undo: function() {
          return x = -1;
        },
        message: 'clear message'
      });
      du.reset();
      it('should clear the queue', function() {
        return assert.equal(0, du.actions().length);
      });
      return it('should reset the location', function() {
        return assert.equal(-1, du.location());
      });
    });
  });

}).call(this);
